#basic-overflow
>This is the first task we have been given, and it is straightforward
##Challenge description
```
This challenge is simple.

It just gets input, stores it to a buffer.

It calls gets to read input, stores the read bytes to a buffer, then exits.

What is gets, you ask? Well, it's time you read the manual, no?

man 3 gets

Cryptic message from author: There are times when you tell them something, but they don't reply. In those cases, you must try again. Don't just shoot one shot; sometimes, they're just not ready yet.

Author: drec

nc 34.123.15.202 5000
```
##Solution
we check our binary
```
$ file basic_overflow 
basic_overflow: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=9fa245805d39057f51a0a4155eb71162b48ff682, for GNU/Linux 4.4.0, not stripped
```
now we know that we have an ELF 64-bit LSB executable

then, we can check the security level of our binary
```
we can try to debug it usinf gdb and check for functions available
```
$ gdb basic_overflow
gefâž¤  info functions
All defined functions:

Non-debugging symbols:
0x0000000000401000  _init
0x0000000000401030  execve@plt
0x0000000000401040  gets@plt
0x0000000000401050  _start
0x0000000000401080  _dl_relocate_static_pie
0x0000000000401136  shell
0x0000000000401156  main
0x0000000000401178  _fini
```

$ checksec basic_overflow
[*] 'path_to_basic_overflow'
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
```
we can see that no stack canary found for this binary we can achieve our basic overflow (gets function is mentioned in the description which is so vulnerable) and we gonna try to return to the shell function which has a static adress since we see too `PIE:      No PIE (0x400000)`
